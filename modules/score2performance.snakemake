rule get_id:
    input:
        'data/{data}.formatted.filter_by_size.pass.reorder'
    output:
        temp('data/{data}_passed_id_list.txt')
    shell:
        '''cat {input[0]} | \
        awk -F"\t" '{print $4}' | \
        awk -F":" '{print $1} > {output[0]}
        '''
rule score2feather:
# This rule takes the whole prediction generated by input2score.snakemake (it should
# be an HDF5 file) and extract labels of interest from it and save as FEATHER file.
# See usage of feather file at https://github.com/wesm/feather/tree/master/python
    input:
        data_a1='score/{name}/{data}_allele1.hdf5'.format(name=config['model']['name'], data='{data}'),
        data_a2='score/{name}/{data}_allele2.hdf5'.format(name=config['model']['name'], data='{data}'),
        idx='data/{data}_passed_id_list.txt'
    params:
        label_num=lambda wildcards: ' '.join([ str(config['label'][wildcards.group][i]) for i in config['label'][wildcards.group].keys() ]),
        label_name=lambda wildcards: ' '.join([ i for i in config['label'][wildcards.group].keys() ])
    output:
        'score/{name}/{group}/{data}_result.feather'.format(name=config['model']['name'], data='{data}', group='{group}')
    shell:
        '''scripts/score2feather.py --allele1 {input.data_a1} --allele2 {input.data_a2} \
        --label_num {params.label_num} --label_name {params.label_name} \
        --out {output} --id {input.idx}'''

for performance_snkmk in config['performance']:
    include: 'submodules/score2performance/performance/{snkmk}'.format(snkmk=config['performance'][performance_snkmk]['method'])
# This submodule takes the labels of interest extracted above and run through a script to
# measure its performance and generate an html report (the report should be as light
# and informative as possible without too much data).
