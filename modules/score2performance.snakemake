rule score2rds:
# This rule takes the whole prediction generated by input2score.snakemake (it should
# be an HDF5 file) and extract labels of interest from it and save as RDS file.
    input:
        data_a1='score/{name}/{data}_allele1.hdf5'.format(name=config['model']['name'], data=data),
        data_a2='score/{name}/{data}_allele2.hdf5'.format(name=config['model']['name'], data=data),
        label_num=' '.join([ str(config['model'][group][i]) for i in config['model'][group].keys() ]
        label_name=' '.join([ i for i in config['model'][group].keys() ])
    output:
        'score/{name}/{group}/{data}_result.feather'.format(name=config['model']['name'], data=data, group=group)
    shell:
        '''scripts/score2rds.py --allele1 {input.data_a1} --allele2 {input.data_a2} \
        --label_num {input.label_num} --label_name {input.label_name} \
        --out {output}'''

rule rds2performance:
# This rule takes the labels of interest extracted above and run through a script to
# measure its performance and generate an html report (the report should be as light
# and informative as possible without too much data).
    input:
        'score/{name}/{group}/{data}_result.feather'.format(name=config['model']['name'], data=data, group=group)
    output:
        'performance/{name}/{group}/{method}/{data}_report.html'
    params:
        config['performance'][method]['params']
    script:
        '''scripts/{script} --params {params} \
        --input {input} --output {output}'''.format(script=config['performance'][method]['script'])
