# Here we make training step as a subworkflow of prediction step
# The main reason is that the model is well defined by the training data and the
# model architecture with training details so it is werid to put the training
# information with this prediction pipeline together. Here the main object should
# be input variant but not model

subworkflow train_model:
    workdir: config['model']['workdir']
    snakefile: config['model']['snakemake']

rule prediction_allele1:
#This rule takes a pair of HDF5 file as input and make the prediction (take the mean
#of two directions)
    input:
        model=train_model('{name}_copy.hdf5'.format(name=config['model']['name'])),
        x1='input/{data}_allele1.hdf5'
    output:
        o1='score/{name}/{data}_allele1.hdf5'.format(name=config['model']['name'], data='{data}')
    log:
        a1='logs/{name}/{data}_allele1.log'.format(name=config['model']['name'], data='{data}')
    shell:
        'python scripts/prediction.py --model {input.model} --data {input.x1} --out {output.o1} > {log.a1}'

rule prediction_allele2:
    input:
        model=train_model('{name}_copy.hdf5'.format(name=config['model']['name'])),
        x2='input/{data}_allele2.hdf5'
    output:
        o2='score/{name}/{data}_allele2.hdf5'.format(name=config['model']['name'], data='{data}')
    log:
        a2='logs/{name}/{data}_allele2.log'.format(name=config['model']['name'], data='{data}')
    shell:
        'python scripts/prediction.py --model {input.model} --data {input.x2} --out {output.o2} > {log.a2}'

