# Here we make training step as a subworkflow of prediction step
# The main reason is that the model is well defined by the training data and the
# model architecture with training details so it is werid to put the training
# information with this prediction pipeline together. Here the main object should
# be input variant but not model

subworkflow train_model:
    workdir: config['model']['workdir']
    snakefile: config['model']['snakemake']

rule prediction_allele1:
'''
This rule takes a pair of HDF5 file as input and make the prediction (take the mean
of two directions)
'''
    input:
        model=train_model(config['model']['name']),
        x1='input/{data}_allele1.hdf5'
    output:
        o1='score/{config[model][name]}/{data}_allele1.hdf5',
    logs:
        a1='logs/{config[model][name]}/{data}_allele1.log',
    shell:
        'python input2score/scripts/prediction.py --model {input.model} --data {input.x1} --out {output.o1} > {logs.a1}'

rule prediction_allele2:
    input:
        model=train_model(config['model']['name']),
        x2='input/{data}_allele2.hdf5'
    output:
        o2='score/{config[model][name]}/{data}_allele2.hdf5'
    logs:
        a2='logs/{config[model][name]}/{data}_allele2.log'
    shell:
        'python input2score/scripts/prediction.py --model {input.model} --data {input.x2} --out {output.o2} > {logs.a2}'
